---
- name: create system group
  group:
    name: "{{ consul_template_system_group }}"
    system: true
    state: present
  when: consul_template_system_group != "root"
  become: true
  tags: consul_template

- name: create system user
  user:
    name: "{{ consul_template_system_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ consul_template_system_group }}"
    createhome: false
  when: consul_template_system_user != "root"
  become: true
  tags: consul_template

- name: create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ consul_template_system_user }}"
    group: "{{ consul_template_system_group }}"
    mode: 0755
  with_items:
    - "{{ consul_template_config_dir }}"
    - "{{ consul_template_template_dir }}"
    - "{{ consul_template_output_dir }}"
  become: true
  tags: consul_template

- name: check if is installed
  stat:
    path: "{{ consul_template_binary_install_dir }}/consul-template"
  register: __consul_template_is_installed
  become: true
  tags: consul_template

- name: gather currently installed version
  command: "{{ consul_template_binary_install_dir }}/consul-template -version"
  args:
    warn: false
  changed_when: false
  register: __consul_template_current_version_output
  when: __consul_template_is_installed.stat.exists
  become: true
  tags: consul_template

- name: download binary to local folder
  get_url:
    url: "https://releases.hashicorp.com/consul-template/{{ consul_template_version }}/consul-template_{{ consul_template_version }}_linux_{{ go_arch }}.zip"
    dest: "/tmp/consul_template-{{ consul_template_version }}.linux-{{ go_arch }}.zip"
  environment: "{{ proxy_env }}"
  register: _download_archive
  until: _download_archive is succeeded
  retries: 5
  delay: 2
  delegate_to: localhost
  check_mode: false
  become: false
  tags: consul_template
  when: (not __consul_template_is_installed.stat.exists) or (__consul_template_current_version_output.stdout_lines[0].split(" ")[1]|regex_search('[0-9.]+') != consul_template_version)

- name: unpack binaries
  unarchive:
    src: "/tmp/consul_template-{{ consul_template_version }}.linux-{{ go_arch }}.zip"
    dest: "/tmp"
  delegate_to: localhost
  check_mode: false
  become: true
  tags: consul_template
  when: (not __consul_template_is_installed.stat.exists) or (__consul_template_current_version_output.stdout_lines[0].split(" ")[1]|regex_search('[0-9.]+') != consul_template_version)

- name: propagate binaries
  copy:
    src: "/tmp/{{ item }}"
    dest: "{{ consul_template_binary_install_dir }}/{{ item }}"
    mode: 0755
    owner: "root"
    group: "root"
  with_items:
    - consul-template
  notify: restart consul_template
  become: true
  tags: consul_template
  when: (not __consul_template_is_installed.stat.exists) or (__consul_template_current_version_output.stdout_lines[0].split(" ")[1]|regex_search('[0-9.]+') != consul_template_version)

- name: configure consul-template
  template:
    src: "consul-template.config.hcl.j2"
    dest: "{{ consul_template_config_dir }}/{{ consul_template_config_file }}"
    owner: "{{ consul_template_system_user }}"
    group: "{{ consul_template_system_group }}"
    mode: 0644  
  notify: restart consul_template
  become: true
  tags: 
    - consul_template
    - consul_template_config

- name: configure
  template:
    src: "consul-template.config.hcl.j2"
    dest: "{{ consul_template_config_dir }}/{{ consul_template_config_file }}"
    owner: "{{ consul_template_system_user }}"
    group: "{{ consul_template_system_group }}"
    mode: 0644
  notify: restart consul_template
  become: true
  tags: consul_template_config

- name: configure prometheus file_sd for node meta
  template:
    src: consul-template.prometheus_file_sd_node.j2
    dest: "{{ item.source }}"
    owner: "{{ consul_template_system_user }}"
    group: "{{ consul_template_system_group }}"
    mode: 0644
  with_items: "{{ consul_template_templates_config_node }}"
  notify: restart consul_template
  become: true
  tags: 
    - consul_template
    - consul_template_config

- name: create systemd service unit
  template:
    src: consul-template.service.j2
    dest: /etc/systemd/system/consul_template.service
    owner: root
    group: root
    mode: 0644
  notify: restart consul_template
  become: true
  tags: consul_template

- name: ensure service is started and enabled
  systemd:
    daemon_reload: true
    name: consul_template
    state: started
    enabled: true
  become: true
  tags: consul_template
